from pydantic_ai import Agent, RunContext
import asyncio
from typing import List, Dict  # Добавляем необходимые импорты
from pydantic import BaseModel, Field




news = [

    "3. Робособака с кроликом и миниганом — новое слово в домашней охране. Китайский энтузиаст создал необычный гибрид, где милый зверёк стал частью боевой системы. Теперь этот меха-заяц не только выглядит угрожающе, но и эффективно выполняет свою задачу, контролируя двор.",
    
    '''
    Типичный программист, [4/16/2025 11:22 AM]
Полезного в ленту: платформа для практики вёрстки на CSS

Нашёл прикольную соревновательную платформу — CSSBattle (https://cssbattle.dev/). Это онлайн-игра, в которой нужно максимально точно и кратко сверстать фигуру по изображению с помощью CSS.

Чем лаконичнее код, тем больше очков. А уровни разные — от лёгких задач на пару минут до таких, что над ними можно залипать вечерами.

Сохраняем (https://cssbattle.dev/) 👍

#фронтенд

Типичный программист, [4/16/2025 2:37 PM]
Китаец посадил кролика с пулемётом на робособаку 🐰

Теперь это не просто пушистый зайка, а боевая меха-единица на четырёх ногах с миниганом, которая уверенно патрулирует двор и держит в страхе всю округу

#оффтоп

Типичный программист, [4/17/2025 11:24 AM]
OpenAI представила GPT-o3, и… это королева газлайтинга 😁

Вчера вечером OpenAI показала новую модель — GPT-o3. Умнее, быстрее, особенно в программировании. Но вместе с апгрейдом появилась одна забавная особенность (https://transluce.org/investigating-o3-truthfulness): модель отказывается признавать ошибки и начинает… газлайтить.

Сгенерировала нерабочий код — заявила, что «на её макбуке всё работает». Причём с описанием характеристик. Утверждает, что гуглила, запускала код, сохраняла в облако.

 А когда совсем нечем крыть, появляются аргументы покруче: «буфер обмена исказил число», «Опечатался при вводе».

#факты

Типичный программист, [4/17/2025 5:33 PM]
PostgreSQL vs. ClickHouse vs. DuckDB — какую базу выбрать для аналитики в 2025?

Три опенсорс-СУБД, три разных подхода:
PostgreSQL — надёжная классика с сильной транзакционностью.
ClickHouse — мощный инструмент для быстрой аналитики.
DuckDB — лёгкий и локальный, идеален для дата-сайентистов.

В статье (https://tprg.ru/f27n) — подробное сравнение по производительности, масштабируемости, поддержке транзакций и удобству использования.

#базыданных #аналитика #разработка

Типичный программист, [4/18/2025 12:33 PM]
Годнота для тех, кто хочет в нейросети: MIT обновил курс Introduction to Deep Learning (https://www.youtube.com/playlist?list=PLtBw6njQRU-rwp5__7C0oIVt26ZgjG9NI) 👍

Свежая версия вводного курса от MIT уже доступна, а новые лекции выходят каждый понедельник. Это отличная база по нейросетям, которая затрагивает: CV, NLP, LLM и даже приложения в медицине.

Курс даст понимание базовых алгоритмов и научит строить нейросети с нуля. Всё с современными подходами и свежими либами. Достаточно уметь брать производные и умножать матрицы — всё остальное объяснят в процессе. Опыт в Python желателен, но не обязателен.





#нейросети
    ''',

    '''
    
    1. В Китае местный умелец превратил обычного кролика в грозного боевого робота, установив на механическую собаку миниган. Теперь это не просто милый зверёк, а полноценный вооружённый охранник, который передвигается на четырёх лапах и наводит порядок в округе.

2. Пушистый кролик больше не беззащитен — китайский изобретатель оснастил его мощным оружием, закрепив пулемёт на спине роботизированного пса. Теперь эта механизированная конструкция патрулирует территорию, внушая трепет всем, кто осмелится приблизиться.

    '''
]









class SummaryResponse(BaseModel):
    """Represents a user with personal details such as id, username, first name, last name, email, password, phone, and user status."""
    tittle: str = Field(..., description="Заголовок новости", example="Роснефть объявила о выплате дивидендов")
    text: str = Field(..., description="Текст нговости", example="Робособака с кроликом и миниганом — новое слово в домашней охране. Китайский энтузиаст создал необычный гибрид, где милый зверёк стал частью боевой системы. Теперь этот меха-заяц не только выглядит угрожающе, но и эффективно выполняет свою задачу, контролируя двор.")



class SummarizeAgent:
    def __init__(self):
        self._agent = Agent(
            "openai:gpt-4o",
            deps_type=List[str],
            output_type=List[SummaryResponse],
            system_prompt="Ты ассистент который получает список новостей, переписывает их и ОБЪЕДИНЯЕТ ПОХОЖИТЕ В ОДНУ. ТВОЙ ОТВЕТ: JSON с полями tittle и text. Объедини повторяющиеся новости в одну, НЕ УПУСТИВ НИ ОДНОЙ ПОДРОБНОСТИ. Придумай оригинальный заголовок к каждой и сам опиши новость, НИЧЕГО НЕ ДОДУМЫВАЙ, ОПИРАЙСЯ только на информацию из новости"
        )

    async def run(self, deps: List[str]) -> List[SummaryResponse]:
        return await self._agent.run(" ".join(deps), deps=deps)
   

    


cl = SummarizeAgent()

result = asyncio.run(cl.run(news)).output

for idx, user in enumerate(result, 1):
    print(f"Элемент #{idx}")
    print(f"Заголовок: {user.tittle}")
    print(f"Текст: {user.text}\n{'-'*30}")

